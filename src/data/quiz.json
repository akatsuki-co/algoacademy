[
  {
    "id": 1,
    "question": "Which statement about tuples is false?",
    "answers": {
      "a": "Tuples are stored in a single block of memory.",
      "b": "An element in a tuple cannot be removed or replaced.",
      "c": "Tuples consist of mutable objects.",
      "d": "Tuples have data stored in () brackets."
    },
    "correct_answer": ["c"]
  },
  {
    "id": 2,
    "question": "Which of the following is an invalid method on list objects?",
    "answers": {
      "a": "push",
      "b": "pop",
      "c": "append",
      "d": "concat"
    },
    "correct_answer": ["a"]
  },
  {
    "id": 3,
    "question": "Who invented Python?",
    "answers": {
      "a": "Guido Van Rossum",
      "b": "Dennis Ritchie",
      "c": "Brendan Eich",
      "d": "Yukihiro Matsumoto"
    },
    "correct_answer": ["a"]
  },
  {
    "id": 4,
    "question": "What library can arrays be imported from?",
    "answers": {
      "a": "bcrypt",
      "b": "typing",
      "c": "math",
      "d": "numpy"
    },
    "correct_answer": ["d"]
  },
  {
    "id": 5,
    "question": "How is memory managed in Python?",
    "answers": {
      "a": "All Python objects and data structures are handled in the public heap.",
      "b": "It is the user's responsibility to allocate and free all memory.",
      "c": "Python has an inbuilt garbage collector, which recycles all unused memory.",
      "d": "Everything runs on the cloud."
    },
    "correct_answer": ["c"]
  },
  {
    "id": 6,
    "question": "What is the GIL?",
    "answers": {
      "a": "Greater Illinois Lakes",
      "b": "Geographical Instances Library",
      "c": "Graph Interface Library",
      "d": "Global Interpreter Lock"
    },
    "correct_answer": ["d"]
  },
  {
    "id": 7,
    "question": "Which of the following statements about lambda functions is true?",
    "answers": {
      "a": "Python does not support lambdas.",
      "b": "Lambdas are small, anonymous functions used as parts of other functions.",
      "c": "Lambdas are instantiated with the def keyword.",
      "d": "Lambas return true by default."
    },
    "correct_answer": ["b"]
  },
  {
    "id": 8,
    "question": "What is pickling in Python?",
    "answers": {
      "a": "Pickling is converting an object into a string representation and then dumping it into a file.",
      "b": "Pickling is the process of using Machine Learning algorithms to predict speech patterns.",
      "c": "Trick question. Pickling is turning cucumbers into literal pickles.",
      "d": "Pickling is a common practice in which every function in a file is unit-tested."
    },
    "correct_answer": ["a"]
  },
  {
    "id": 9,
    "question": "What is the Numpy library not used for?",
    "answers": {
      "a": "Linear algebra",
      "b": "Statistics",
      "c": "Encryption",
      "d": "Histograms"
    },
    "correct_answer": ["c"]
  },
  {
    "id": 10,
    "question": "What types of inheritance is supported by Python?",
    "answers": {
      "a": "Single inheritance - a derived class acquires the members of a single superclass.",
      "b": "Heirarchical inheritance - a base class inherits fom a number of child classes.",
      "c": "Multiple inheritance - a derived class is inherited from more than one base class.",
      "d": "All of the above."
    },
    "correct_answer": ["d"]
  },
  {
    "id": 11,
    "question": "Does Python support polymorphism?",
    "answers": {
      "a": "True",
      "b": "False",
      "c": "I don't know",
      "d": "All of the above."
    },
    "correct_answer": ["a"]
  },
  {
    "id": 12,
    "question": "What python builtin is used to loop over indexes AND elements?",
    "answers": {
      "a": "xrange",
      "b": "filter",
      "c": "enumerate",
      "d": "reduce"
    },
    "correct_answer": ["c"]
  },
  {
    "id": 13,
    "question": "Which one of these is NOT a Python linter?",
    "answers": {
      "a": "flake8",
      "b": "pylint",
      "c": "analinter",
      "d": "pylama"
    },
    "correct_answer": ["c"]
  },
  {
    "id": 14,
    "question": "What are Python decorators?",
    "answers": {
      "a": "A decorator is a design pattern that allows a user to add new functionality to an existing object.",
      "b": "A decorator is a common technique to pretty-format your code.",
      "c": "A decorator is a tool to take advantage of concurrency and multithreading.",
      "d": "Python does not support decorators. You have to import the decorator library."
    },
    "correct_answer": ["a"]
  },
  {
    "id": 15,
    "question": "What is __init__?",
    "answers": {
      "a": "init() is used to declare special objects like generators.",
      "b": "init() is the entry point for program execution.",
      "c": "init() initializes all variables declared in a class to the global scope.",
      "d": "init() is a constructor method."
    },
    "correct_answer": ["d"]
  },
  {
    "id": 16,
    "question": "How do you write ternary expressions in Python?",
    "answers": {
      "a": "condition ? condition_if_true : condition_if_false.",
      "b": "condition_if_true if condition else condition_if_false.",
      "c": "condition ^ condition_if_true | condition_if_false",
      "d": "Python does not support ternary expressions."
    },
    "correct_answer": ["b"]
  },
  {
    "id": 17,
    "question": "What is the @property in Python?",
    "answers": {
      "a": "@property is a decorator used to document your class methods.",
      "b": "@property is a generator that yields calls to the property method.",
      "c": "@property is a decorator that allows a function to be accessed like an attribute.",
      "d": "@property does not exist in Python."
    },
    "correct_answer": ["c"]
  },
  {
    "id": 18,
    "question": "What is a dictionary comprehension?",
    "answers": {
      "a": "It is a way to create a dictionary by merging two sets of data which are in the form of either lists or arrays.",
      "b": "It is a dictionary that has optimized for agility and performance.",
      "c": "It is a old way method of creating dictionaries in Python 2.0*.",
      "d": "It is the act of flattening out nested dictionaries to make it easier to loop through its key/pair values."
    },
    "correct_answer": ["a"]
  },
  {
    "id": 19,
    "question": "How would you make a deep copy of lists/dictionaries in Python?",
    "answers": {
      "a": "You can simply use the = operator to assign it to another object.",
      "b": "Import the clone libary and use deepcopy().",
      "c": "Python has a deepcopy() builtin.",
      "d": "Import the copy library and use deepcopy()."
    },
    "correct_answer": ["d"]
  },
  {
    "id": 20,
    "question": "How do you represent infinity in Python?",
    "answers": {
      "a": "math.intmax",
      "b": "+NaN",
      "c": "inf",
      "d": "float('inf')"
    },
    "correct_answer": ["d"]
  },
  {
    "id": 21,
    "question": "What is true about switch statements in Python?",
    "answers": {
      "a": "Switch statements use lambdas for case statements to keep code short and clean.",
      "b": "Switch statements follow the reducer design pattern by accepting actions and payloads.",
      "c": "Switch statements do not require break statements as it is implictly implied.",
      "d": "They are not supported in Python."
    },
    "correct_answer": ["d"]
  },
  {
    "id": 22,
    "question": "Which Python collection would be used to build a LRU (Least Recently Used) cache?",
    "answers": {
      "a": "FrozenSet",
      "b": "OrderedDict",
      "c": "Counter",
      "d": "DefaultDict"
    },
    "correct_answer": ["b"]
  },
  {
    "id": 23,
    "question": "How can Python Docstrings be accessed?",
    "answers": {
      "a": "Using the @docstring decorator on the object.",
      "b": "Calling the builtin documentation() on the object.",
      "c": "Using the __doc__ method of the object and/or the help function",
      "d": "Import the typing library and calling doc() on the object."
    },
    "correct_answer": ["c"]
  },
  {
    "id": 24,
    "question": "Explain the difference between a generator and an iterator in Python.",
    "answers": {
      "a": "An iterator uses the yield statement to return values. A generator is an object that generates random values whenever called.",
      "b": "An iterator is a subclass of a list and a generator is a subclass of a dictionary.",
      "c": "An iterator serves as a holder for objects so that they can be iterated over. A generator facilitates the creation of a custom iterator.",
      "d": "Iterators and generators do not exist in Python."
    },
    "correct_answer": ["c"]
  },
  {
    "id": 25,
    "question": "Why is the 'with' statement used in Python I/O?",
    "answers": {
      "a": "It allows the user to bypass all read/write permissions which makes it a powerful scripting tool.",
      "b": "It allows Python to detect what encoding the file needs to be opened with, such as 'utf-8' or 'utf-16'.",
      "c": "It automatically catches all Exceptions and prints it to stdout.",
      "d": "It clarifies code that previously used try...finally blocks to ensure that clean-up code is executed."
    },
    "correct_answer": ["d"]
  }
]
